// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  COMPLETED
  ACCEPTED
  FAILED
}

enum CurrencyEnum {
  UAH
  USD
}

enum PaymentMethodEnum {
  CARD
  IBAN
}

enum RoleEnum {
  GUEST
  ADMIN
  WORKER
}

model User {
  id                        String                      @id @default(cuid())
  username                  String?                     @unique
  telegramId                BigInt                      @unique
  onPause                   Boolean                     @default(false)
  Role                      Role[]
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  paymentRequests           PaymentRequests[]
  payedRequests             PaymentRequests[]           @relation("payedByUser")
  activeRequests            PaymentRequests[]           @relation("activeRequests")
  vendors                   Vendors[]
  adminRequestPhotoMessage  AdminRequestPhotoMessage[]
  WorkerRequestPhotoMessage WorkerRequestPhotoMessage[]
}

model Role {
  id    String   @id @default(cuid())
  name  RoleEnum @unique
  users User[]
}

model Vendors {
  id             String    @id @default(cuid())
  chatId         BigInt    @unique
  work           Boolean   @default(false)
  showReceipt    Boolean   @default(false)
  title          String    @unique
  token          String?   @unique
  lastReportedAt DateTime? @default(now())

  lastAllRatesSentAt   DateTime?         @default(now())
  lastAllRateMessageId Int?              @unique
  requests             PaymentRequests[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model PaymentRequests {
  id                        String                      @id @default(cuid())
  vendorId                  String
  vendor                    Vendors                     @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  userId                    String?
  user                      User?                       @relation(fields: [userId], references: [id])
  cardMethods               CardPaymentRequestsMethod[]
  ibanMethods               IbanPaymentRequestsMethod[]
  paymentMethod             PaymentMethod?              @relation(fields: [paymentMethodId], references: [id])
  payedByUser               User?                       @relation("payedByUser", fields: [payedByUserId], references: [id])
  payedByUserId             String?
  amount                    Float
  status                    Status                      @default(PENDING)
  error                     String?
  currencyId                String
  notificationSent          Boolean                     @default(false)
  currency                  Currency                    @relation(fields: [currencyId], references: [id])
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  completedAt               DateTime?
  message                   Message[]
  rates                     Rates?                      @relation(fields: [ratesId], references: [id])
  ratesId                   String?
  activeUserId              String?
  activeUser                User?                       @relation("activeRequests", fields: [activeUserId], references: [id])
  adminRequestPhotoMessage  AdminRequestPhotoMessage[]
  workerRequestPhotoMessage WorkerRequestPhotoMessage[]
  paymentMethodId           String?
}

enum AccessType {
  PUBLIC
  WORKER
  ADMIN
}

model Message {
  id              String          @id @default(cuid())
  chatId          BigInt
  messageId       Int             @unique
  text            String?
  photoUrl        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  requestId       String
  accessType      AccessType      @default(PUBLIC)
  paymentRequests PaymentRequests @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model CardPaymentRequestsMethod {
  id              String           @id @default(cuid())
  requestId       String?
  paymentRequests PaymentRequests? @relation(fields: [requestId], references: [id], onDelete: Cascade)
  card            String
  blackList       BlackList[]
  bank            CardBank?        @relation(fields: [bankId], references: [id], onDelete: Cascade)
  bankId          String?
  comment         String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model IbanPaymentRequestsMethod {
  id              String           @id @default(cuid())
  requestId       String?
  paymentRequests PaymentRequests? @relation(fields: [requestId], references: [id], onDelete: Cascade)
  iban            String
  inn             String
  comment         String?
  name            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Rates {
  id              String            @id @default(cuid())
  currencyId      String
  minAmount       Float
  maxAmount       Float
  rate            Float
  updatedAt       DateTime          @updatedAt
  createdAt       DateTime          @default(now())
  paymentMethodId String
  currency        Currency          @relation(fields: [currencyId], references: [id])
  paymentMethod   PaymentMethod     @relation(fields: [paymentMethodId], references: [id])
  paymentRequests PaymentRequests[]
}

model PaymentMethod {
  id              String            @id @default(cuid())
  nameEn          PaymentMethodEnum @unique
  description     String?
  descriptionEn   String?
  icon            String?
  rates           Rates[]
  paymentRequests PaymentRequests[]
}

model Currency {
  id              String            @id @default(cuid())
  code            String            @unique
  name            CurrencyEnum      @unique
  nameEn          String
  symbol          String?
  paymentRequests PaymentRequests[]
  Rates           Rates[]
}

model BlackList {
  id        String                      @id @default(cuid())
  requestId String?                     @unique
  card      CardPaymentRequestsMethod[]
  reason    String?
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
}

model AdminRequestPhotoMessage {
  id              String          @id @default(cuid())
  requestId       String
  paymentRequests PaymentRequests @relation(fields: [requestId], references: [id], onDelete: Cascade)
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model WorkerRequestPhotoMessage {
  id              String          @id @default(cuid())
  requestId       String
  paymentRequests PaymentRequests @relation(fields: [requestId], references: [id], onDelete: Cascade)
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model CardBank {
  id                        String                      @id @default(cuid())
  number                    String                      @unique
  bankName                  String
  bankNameEn                String
  icon                      String?
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  cardPaymentRequestsMethod CardPaymentRequestsMethod[]
}

model Settings {
  name      String   @id @default("default")
  onPause   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

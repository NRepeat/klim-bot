import { createReadStream, ReadStream } from 'fs';
import { AccessType } from 'generated/prisma';
import { FullRequestType } from 'src/types/types';
import { Markup } from 'telegraf';
import { InlineKeyboardMarkup } from 'telegraf/typings/core/types/typegram';

interface IMenu {
  caption: string;
  markup: InlineKeyboardMarkup;
  username?: string;
  request?: FullRequestType;
}

interface IMenuWithMedia extends IMenu {
  url: string;
  source?: Buffer<ArrayBufferLike> | ReadStream;
}

class Menu implements IMenu {
  caption: string;
  markup: InlineKeyboardMarkup;
  username?: string;
  request?: FullRequestType;
  constructor(
    caption: string,
    markup: InlineKeyboardMarkup,
    request?: FullRequestType,
  ) {
    this.caption = caption;
    this.markup = markup;
    this.request = request;
  }
}
class MenuWithMedia extends Menu implements IMenuWithMedia {
  url: string;
  source: Buffer<ArrayBufferLike>;
  constructor(
    caption: string,
    markup: InlineKeyboardMarkup,
    url: string,
    request?: FullRequestType,
    source?: Buffer<ArrayBufferLike>,
  ) {
    super(caption, markup, request);
    this.url = url;
    this.source = source
      ? source
      : (createReadStream(url) as any as Buffer<ArrayBufferLike>);
  }
}

class SelectPaymentMethodMenu extends Menu {
  constructor(username?: string) {
    const caption = MESSAGES.SELECT_PAYMENT_METHOD(username || '');
    const markup: InlineKeyboardMarkup = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          BUTTON_TEXTS.CARD,
          BUTTON_CALLBACKS.CARD_REQUEST,
        ),
        Markup.button.callback(
          BUTTON_TEXTS.IBAN,
          BUTTON_CALLBACKS.IBAN_REQUEST,
        ),
        Markup.button.callback(
          BUTTON_TEXTS.CANCEL,
          BUTTON_CALLBACKS.CANCEL_REQUEST,
        ),
      ],
    ]).reply_markup;
    super(caption, markup);
  }
}
abstract class PaymentMenu extends Menu {
  constructor(caption: string, username?: string) {
    const markup = createSingleButtonMarkup(
      BUTTON_TEXTS.BACK,
      BUTTON_CALLBACKS.RETURN_TO_REQUEST_MENU,
    );
    super(caption, markup);
    this.username = username;
  }
}

class CardPaymentMenu extends PaymentMenu {
  constructor(username?: string) {
    const caption = MESSAGES.CARD_PAYMENT_FORM(username || '');
    super(caption, username);
  }
}

class IbanPaymentMenu extends PaymentMenu {
  constructor(username?: string) {
    const caption = MESSAGES.IBAN_PAYMENT_FORM(username || '');
    super(caption, username);
  }
}

abstract class BaseRequestMenu {
  request: FullRequestType;
  url: string;
  source: Buffer<ArrayBufferLike>;

  constructor(
    url: string,
    request: FullRequestType,
    source?: Buffer<ArrayBufferLike>,
  ) {
    const photoUrl = './src/assets/0056.jpg';
    this.request = request;
    this.url = url ? url : photoUrl;
    this.source = source || Buffer.from([]);
  }

  protected abstract getAccessType(): AccessType;

  messageFromRequest(accessType?: AccessType): string {
    if (!this.request) {
      return MESSAGES.NO_DATA;
    }
    const currentAccessType = accessType || this.getAccessType();
    const isCard = this.request.paymentMethod?.nameEn === 'CARD';
    console.log('isCard:', isCard, 'currentAccessType:', currentAccessType);
    if (isCard) {
      const cardMethods = this.request.cardMethods || [];
      console.log('cardMethods', this.request);

      const bank = cardMethods[0]?.bank?.bankName
        ? cardMethods[0]?.bank?.bankName
        : '-';
      const amount = this.request.amount || 0;
      const rateValue = this.request.rates?.rate;
      const rate = rateValue
        ? `üí±<b>–ö—É—Ä—Å:</b> <code>${rateValue}</code>\n`
        : '';
      const usdt = rateValue
        ? `üíé<b>USDT:</b> <code>${(amount / rateValue).toFixed(2)}</code>\n`
        : '';
      const isBlacklisted =
        cardMethods[0]?.blackList && cardMethods[0]?.blackList.length > 0;
      console.log('isBlacklisted:', isBlacklisted, 'cardMethods:', cardMethods);
      console.log('cardMethods[0].blackList:', cardMethods[0]?.blackList);
      const blacklist = isBlacklisted && 'üö´–ö–∞—Ä—Ç–∞ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ';

      const acceptedBy = this.request.activeUser
        ? `<b>–ü—Ä–∏–Ω—è—Ç–∞:</b> @${this.request.activeUser.username}\n`
        : '';
      const card =
        cardMethods.length > 0 && cardMethods[0]?.card
          ? `üí≥<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${acceptedBy ? cardMethods[0].card : Array.from(cardMethods[0].card, () => '*').join('')}</code>\n`
          : '';
      const payedBy = this.request.payedByUser?.username
        ? '<b>–û–ø–ª–∞—á–µ–Ω–æ:</b> @' + this.request.payedByUser.username + '\n'
        : '';
      const vendor = this.request.vendor?.title || '-';
      return (
        `‚úâÔ∏è<b>–ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä:</b> <code>${this.request.id ?? '-'}</code>\n` +
        `üè¶<b>–ë–∞–Ω–∫:</b> <i>${bank}</i>\n` +
        `üíµ<b>–°—É–º–º–∞:</b> <code>${amount}</code>\n` +
        rate +
        usdt +
        card +
        (currentAccessType === 'ADMIN' || currentAccessType === 'WORKER'
          ? acceptedBy
          : '') +
        (currentAccessType === 'ADMIN' ? payedBy : '') +
        (currentAccessType === 'ADMIN'
          ? `<b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> <i>${vendor}</i>\n`
          : '') +
        (currentAccessType === 'ADMIN' || currentAccessType === 'WORKER'
          ? blacklist
          : '')
      );
    } else if (this.request.paymentMethod?.nameEn === 'IBAN') {
      const ibanMethods = this.request.ibanMethods || [];
      const name =
        ibanMethods.length > 0 && ibanMethods[0]?.name
          ? `üë§<b>–ò–º—è:</b> <i>${ibanMethods[0].name}</i>\n`
          : '';
      const iban =
        ibanMethods.length > 0 && ibanMethods[0]?.iban
          ? `üè¶<b>IBAN:</b> <code>${ibanMethods[0].iban}</code>\n`
          : '';
      const inn =
        ibanMethods.length > 0 && ibanMethods[0]?.inn
          ? `üìã<b>–ò–ù–ù:</b> <code>${ibanMethods[0].inn}</code>\n`
          : '';
      const comment =
        ibanMethods.length > 0 && ibanMethods[0]?.comment
          ? `üí¨<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>${ibanMethods[0].comment}</i>\n`
          : '';
      const amount = this.request.amount || 0;
      const rateValue = this.request.rates?.rate;
      const rate = rateValue
        ? `üí±<b>–ö—É—Ä—Å:</b> <code>${rateValue}</code>\n`
        : '';
      const usdt = rateValue
        ? `üíé<b>USDT:</b> <code>${(amount / rateValue).toFixed(2)}</code>\n`
        : '';
      console.log('this.request.activeUser', this.request.activeUser);
      const acceptedBy = this.request.activeUser
        ? `<b>–ü—Ä–∏–Ω—è—Ç–∞:</b> @${this.request.activeUser.username}\n`
        : '';
      const payedBy = this.request.payedByUser?.username
        ? '<b>–û–ø–ª–∞—á–µ–Ω–æ:</b> @' + this.request.payedByUser.username + '\n'
        : '';
      const vendor = this.request.vendor?.title || '-';
      return (
        `‚úâÔ∏è<b>–ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä:</b> <code>${this.request.id ?? '-'}</code>\n` +
        `üíµ<b>–°—É–º–º–∞:</b> <code>${amount}</code>\n` +
        rate +
        usdt +
        name +
        iban +
        inn +
        comment +
        (currentAccessType === 'ADMIN' || currentAccessType === 'WORKER'
          ? acceptedBy
          : '') +
        (currentAccessType === 'ADMIN' ? payedBy : '') +
        (currentAccessType === 'ADMIN'
          ? `<b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> <i>${vendor}</i>\n`
          : '')
      );
    }

    return `‚úâÔ∏è<b>–ó–∞—è–≤–∫–∞ –Ω–æ–º–µ—Ä:</b> <code>${this.request.id ?? '-'}</code>\n–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞`;
  }

  inWork(url?: string, requestId?: string): MenuWithMedia {
    const accessType = this.getAccessType();
    let markup: InlineKeyboardMarkup;
    switch (accessType) {
      case 'ADMIN':
        markup = Markup.inlineKeyboard([
          [
            createButton(BUTTON_TEXTS.ADMIN_IN_WORK, BUTTON_CALLBACKS.DUMMY),
            createButton(
              BUTTON_TEXTS.ADMIN_CANCEL_REQUEST,
              BUTTON_CALLBACKS.ADMIN_CANCEL_REQUEST + requestId,
            ),
          ],
        ]).reply_markup;
        break;
      case 'WORKER':
        markup = requestId
          ? Markup.inlineKeyboard([
              [
                createButton(
                  BUTTON_TEXTS.TAKE_REQUEST,
                  BUTTON_CALLBACKS.TAKE_REQUEST + requestId,
                ),
              ],
            ]).reply_markup
          : createSingleButtonMarkup(
              BUTTON_TEXTS.IN_WORK,
              BUTTON_CALLBACKS.IN_WORK,
            );
        break;
      case 'PUBLIC':
      default:
        markup = createSingleButtonMarkup(
          BUTTON_TEXTS.IN_WORK,
          BUTTON_CALLBACKS.IN_WORK,
        );
        break;
    }
    return new MenuWithMedia(
      this.messageFromRequest(),
      markup,
      url || this.url,
    );
  }
  inProcess(url?: string, requestId?: string): Menu {
    const markup = createSingleButtonMarkup(
      BUTTON_TEXTS.IN_WORK,
      BUTTON_CALLBACKS.IN_WORK,
    );
    const newCancelButton = Markup.button.callback(
      '–û—Ç–º–µ–Ω–∞',
      'cancel_payment_' + requestId,
    );
    const inline_keyboard = requestId
      ? Markup.inlineKeyboard([
          [
            createButton(
              BUTTON_TEXTS.REQUEST_COMPLIED,
              BUTTON_CALLBACKS.REQUEST_COMPLIED + requestId,
            ),
            newCancelButton,
          ],
        ]).reply_markup
      : markup;
    return new Menu(this.messageFromRequest(), inline_keyboard);
  }

  done(url?: string): MenuWithMedia {
    const markup = createSingleButtonMarkup(
      BUTTON_TEXTS.DONE,
      BUTTON_CALLBACKS.DONE,
    );
    console.log('Creating done menu with request:', this.messageFromRequest());
    return new MenuWithMedia(
      this.messageFromRequest(),
      markup,
      url || this.url,
      undefined,
      this.source,
    );
  }
  canceled(url?: string, requestId?: string) {
    const accessType = this.getAccessType();
    if (accessType === 'WORKER' && requestId) {
      const markup = Markup.inlineKeyboard([
        [
          createButton(
            BUTTON_TEXTS.VALUT_CARD,
            BUTTON_CALLBACKS.VALUT_CARD + requestId,
          ),
        ],
        [
          createButton(
            BUTTON_TEXTS.BACK_TO_TAKE_REQUEST,
            BUTTON_CALLBACKS.BACK_TO_TAKE_REQUEST + requestId,
          ),
        ],
      ]).reply_markup;
      return new MenuWithMedia(
        this.messageFromRequest(),
        markup,
        url || this.url,
      );
    } else if (accessType === 'ADMIN' && requestId) {
      const markup = Markup.inlineKeyboard([
        [
          createButton(
            BUTTON_TEXTS.REJECTED_BY_ADMIN,
            BUTTON_CALLBACKS.REJECTED_BY_ADMIN,
          ),
        ],
      ]).reply_markup;
      return new MenuWithMedia(
        this.messageFromRequest(),
        markup,
        url || this.url,
      );
    } else {
      return new MenuWithMedia(
        this.messageFromRequest(),
        createSingleButtonMarkup(
          BUTTON_TEXTS.BACK,
          BUTTON_CALLBACKS.RETURN_TO_REQUEST_MENU,
        ),
        url || this.url,
      );
    }
  }
  rejected(url?: string): MenuWithMedia {
    const markup = createSingleButtonMarkup(
      BUTTON_TEXTS.REJECTED,
      BUTTON_CALLBACKS.REJECTED,
    );

    return new MenuWithMedia(
      this.messageFromRequest(),
      markup,
      url || this.url,
    );
  }
}

class PublicMenu extends BaseRequestMenu {
  protected getAccessType(): AccessType {
    return 'PUBLIC';
  }
}

class WorkMenu extends BaseRequestMenu {
  protected getAccessType(): AccessType {
    return 'WORKER';
  }
}

class AdminMenu extends BaseRequestMenu {
  protected getAccessType(): AccessType {
    return 'ADMIN';
  }
}
export class MenuFactory {
  static createMenu(caption: string, markup: InlineKeyboardMarkup): Menu {
    return new Menu(caption, markup);
  }
  static createWorkerMenu(
    request: FullRequestType,
    url: string,
    source?: Buffer<ArrayBufferLike>,
  ): WorkMenu {
    return new WorkMenu(url, request, source);
  }
  static createAdminMenu(
    request: FullRequestType,
    url: string,
    source?: Buffer<ArrayBufferLike>,
  ): AdminMenu {
    return new AdminMenu(url, request, source);
  }
  static createPublicMenu(
    request: FullRequestType,
    url: string,
    source?: Buffer<ArrayBufferLike>,
  ): PublicMenu {
    return new PublicMenu(url, request, source);
  }
  static createSelectPaymentMethodMenu(
    username: string,
  ): SelectPaymentMethodMenu {
    return new SelectPaymentMethodMenu(username);
  }
  static createCardPaymentMenu(username?: string): CardPaymentMenu {
    return new CardPaymentMenu(username);
  }
  static createIbanPaymentMenu(username?: string): IbanPaymentMenu {
    return new IbanPaymentMenu(username);
  }
  static createMenuWithMedia(
    caption: string,
    markup: InlineKeyboardMarkup,
    media: string,
  ): MenuWithMedia {
    return new MenuWithMedia(caption, markup, media);
  }
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const BUTTON_TEXTS = {
  IN_WORK: '–í —Ä–∞–±–æ—Ç–µ',
  DONE: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
  REJECTED: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
  BACK: '–ù–∞–∑–∞–¥',
  CARD: 'CARD',
  IBAN: 'IBAN',
  CANCEL: '–û—Ç–º–µ–Ω–∏—Ç—å',
  TAKE_REQUEST: '–í–∑—è—Ç—å –∑–∞—è–≤–∫—É',
  WORKER_CANCEL_REQUEST: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è',
  ADMIN_CANCEL_REQUEST: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É',
  ADMIN_IN_WORK: '–í —Ä–∞–±–æ—Ç–µ',
  REQUEST_COMPLIED: '–ü–µ—Ä–µ–≤–µ–ª',
  GIVE_NEXT: '–ü–µ—Ä–µ–¥–∞—Ç—å –¥—Ä—É–≥–æ–º—É',
  VALUT_CARD: '–í–∞–ª—é—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞',
  BACK_TO_TAKE_REQUEST: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞—è–≤–∫–∏',
  REJECTED_BY_ADMIN: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º',
} as const;

const BUTTON_CALLBACKS = {
  REJECTED_BY_ADMIN: 'rejected_by_admin_',
  GIVE_NEXT: 'give_next_',
  VALUT_CARD: 'valut_card_',
  BACK_TO_TAKE_REQUEST: 'back_to_take_request_',
  WORKER_CANCEL_REQUEST: 'worker_cancel_request_',
  REQUEST_COMPLIED: 'proceeded_payment_',
  IN_WORK: 'in_work',
  DONE: 'done',
  REJECTED: 'rejected',
  RETURN_TO_REQUEST_MENU: 'return_to_request_menu',
  CARD_REQUEST: 'card_request',
  IBAN_REQUEST: 'iban_request',
  CANCEL_REQUEST: 'cancel_request',
  TAKE_REQUEST: 'accept_request_',
  CANCEL_WORKER_REQUEST: 'cancel_worker_request_',
  DUMMY: 'dummy',
  ADMIN_CANCEL_REQUEST: 'admin_cancel_request_',
} as const;

const MESSAGES = {
  SELECT_PAYMENT_METHOD: (username: string) =>
    `@${username} –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞`,
  CARD_PAYMENT_FORM: (username: string) =>
    `@${username} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—è–≤–∫—É –≤ —Ñ–æ—Ä–º–µ:\n\n –ö–∞—Ä—Ç–∞ —Å—É–º–º–∞ (5168745632147896 1000)`,
  IBAN_PAYMENT_FORM: (username: string) =>
    `@${username} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—è–≤–∫—É –≤ —Ñ–æ—Ä–º–µ:\n–ò–º—è\nIBAN\n–ò–ù–ù\n–°—É–º–º–∞\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)`,
  NO_DATA: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
} as const;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
const createButton = (text: string, callback: string) =>
  Markup.button.callback(text, callback);

const createSingleButtonMarkup = (text: string, callback: string) =>
  Markup.inlineKeyboard([[createButton(text, callback)]]).reply_markup;
